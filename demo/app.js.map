{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./demo/app.ts","webpack:///./src/Model.ts","webpack:///./src/PubSub.ts","webpack:///./src/HTMLView.ts","webpack:///./node_modules/ts-tree/build/Tree.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Model_1","HTMLView_1","ts_tree_1","model","Model","Tree","outputEl","document","getElementById","HTMLLiView","v","text","createTextNode","toString","containerEl","createElement","appendChild","PubSub_1","[object Object]","root","isLeaf","this","clipboard","selection","Set","pubsub","PubSub","fn","subscribe","emitTree","unsubscribe","tree","size","has","node","removeFromSelection","addToSelection","setCursor","ensureValidCursor","selectOne","cursor","previous","next","unselect","isBefore","current","end","target","selectedSubtrees","map","clone","reverse","parent","previousSibling","undefined","insertAfter","remove","reference","emit","type","firstChild","add","delete","sortedSelection","result","sort","a","b","last","isChildOf","push","first","values","done","nextSibling","handlers","event","isMac","navigator","platform","toUpperCase","indexOf","valueToHtmlEl","rootUlEl","treeToHtmlEl","Map","htmlElToTree","cursorEl","modelEventHandler","handleModelEvent","mouseEventHandler","handleMouseEvent","keyboardEventHandler","handleKeyboardEvent","addEventListener","removeEventListener","e","console","log","newNodeEl","nextSiblingEl","getHtmlEl","childNodes","insertBefore","set","el","parentElement","Error","removeChild","classList","targetEl","getTarget","ctrlKey","metaKey","preventDefault","selectToggle","shiftKey","selectUntil","resetSelection","selectAll","copy","paste","selectPrev","selectNext","Node","parentNode","HTMLElement","children","_children","child","_parent","lastChild","length","lastDescendant","parentNext","newTree","index","splice","that","thisAncestors","ancestors","thatAncestors","minLength","Math","min","thisAncestor","thatAncestor","lowestCommonAncestor","siblings","_","childrenBefore","childrenAfter","descendants"],"mappings":"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","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import {Model} from '../src/Model'\nimport {HTMLLiView} from '../src/HTMLView'\nimport {Tree} from \"ts-tree\";\n\nconst model = new Model<number>(new Tree(1,[\n    new Tree(2, [\n        new Tree(3, [\n                new Tree(4)\n                ])]),\n    new Tree(5),\n    new Tree(6),\n    new Tree(7)]), (t) => true);\nconst toHtml = (v: number) => {\n    const text = document.createTextNode(v.toString())\n    const containerEl = document.createElement('div');\n    containerEl.appendChild(text);\n    return containerEl;\n}\nconst outputEl = document.getElementById('output') as HTMLElement;\nconst view = new HTMLLiView<number>(model, toHtml, outputEl);","import {Tree} from 'ts-tree';\nimport {PubSub} from \"./PubSub\";\nimport {ModelEvent} from \"./ModelEvent\";\n\nexport class Model<V> {\n    private clipboard: Array<Tree<V>> = [];\n    private selection: Set<Tree<V>> = new Set();\n    private cursor?: Tree<V>;\n    private pubsub: PubSub<ModelEvent<V>> = new PubSub();\n\n    constructor(readonly root: Tree<V>,\n                readonly isLeaf: (tree: Tree<V>) => boolean) {\n    }\n\n    subscribe(fn: (e: ModelEvent<V>) => any) {\n        this.pubsub.subscribe(fn);\n        this.emitTree(this.root);\n    }\n\n    unsubscribe(fn: (e: ModelEvent<V>) => any) {\n        this.pubsub.unsubscribe(fn);\n    }\n\n    selectOne(tree?: Tree<V>) {\n        if (tree && this.selection.size === 1 && this.selection.has(tree)) {\n            return;\n        }\n        for (const node of this.selection) {\n            this.removeFromSelection(node);\n        }\n        if (!tree) {\n            this.ensureValidCursor();\n            return;\n        }\n        this.addToSelection(tree);\n        this.setCursor(tree);\n    }\n\n    selectPrev() {\n        this.selectOne(this.cursor && this.cursor.previous);\n    }\n\n    selectNext() {\n        this.selectOne(this.cursor && this.cursor.next);\n    }\n\n    selectToggle(tree: Tree<V>) {\n        if (this.selection.has(tree)) {\n            this.unselect(tree);\n        } else {\n            this.addToSelection(tree);\n            this.setCursor(tree);\n        }\n    }\n\n    selectUntil(tree: Tree<V>) {\n        if (!this.cursor) {\n            return;\n        }\n        const isBefore = tree.isBefore(this.cursor) < 0;\n        let current: Tree<V> | undefined = isBefore ? tree : this.cursor.next;\n        const end: Tree<V> | undefined = isBefore ? this.cursor : tree.next;\n        while (current && current !== end) {\n            this.addToSelection(current);\n            current = current.next;\n        }\n        this.setCursor(tree);\n    }\n\n    selectAll() {\n        for(let current: Tree<V> | undefined  = this.root; current; current = current.next) {\n            this.addToSelection(current);\n        }\n    }\n\n    resetSelection() {\n        for (const node of this.selection) {\n            this.removeFromSelection(node);\n        }\n        this.ensureValidCursor();\n    }\n\n    unselect(target: Tree<V>) {\n        this.removeFromSelection(target);\n        this.ensureValidCursor();\n    }\n\n    copy(): void {\n        this.clipboard = this.selectedSubtrees.map((t) => t.clone());\n        this.clipboard.reverse();\n    }\n\n    paste(): void {\n        if (!this.cursor) {\n            return;\n        }\n        const isLeaf = this.isLeaf(this.cursor);\n        const parent = isLeaf ? this.cursor.parent : this.cursor;\n        const previousSibling = isLeaf ? this.cursor : undefined;\n        if (!parent) {\n            return;\n        }\n        for (const tree of this.clipboard) {\n            this.insertAfter(parent, previousSibling, tree.clone());\n        }\n    }\n\n    delete(): void {\n        for (const tree of this.selectedSubtrees) {\n            this.remove(tree);\n        }\n        this.ensureValidCursor();\n    }\n\n    private insertAfter(parent: Tree<V>, reference: Tree<V> | undefined, tree: Tree<V>) {\n        parent.insertAfter(reference, tree);\n        this.pubsub.emit({type: 'insert', tree});\n        this.emitTree(tree.firstChild);\n    }\n\n    private remove(tree: Tree<V>) {\n        this.removeFromSelection(tree);\n        tree.remove();\n        this.pubsub.emit({type: 'remove', tree});\n    }\n\n    private addToSelection(tree: Tree<V>) {\n        if (!this.selection.has(tree)) {\n            this.selection.add(tree);\n            this.pubsub.emit({type: 'add-to-selection', tree});\n        }\n    }\n\n    private removeFromSelection(tree: Tree<V>) {\n        if (this.selection.delete(tree)) {\n            this.pubsub.emit({type: 'remove-from-selection', tree});\n        }\n    }\n\n    private setCursor(tree?: Tree<V>) {\n        if (tree !== this.cursor) {\n            this.pubsub.emit({type: 'move-cursor', tree});\n        }\n        this.cursor = tree;\n    }\n\n    private get sortedSelection() {\n        const result = [...this.selection];\n        result.sort((a, b) => a.isBefore(b));\n        return result;\n    }\n\n    private get selectedSubtrees() {\n        const result = [];\n        let last: Tree<V> | null = null;\n        for (const node of this.sortedSelection) {\n            if (!last || !node.isChildOf(last)) {\n                result.push(node);\n                last = node;\n            }\n        }\n        return result;\n    }\n\n    private ensureValidCursor() {\n        if (this.cursor && this.cursor.root !== this.root) {\n            const first = this.selection.values().next();\n            this.setCursor(first.done ? undefined : first.value);\n        }\n    }\n\n    private emitTree(tree?: Tree<V>) {\n        if (!tree) {\n            return;\n        }\n        this.emitTree(tree.nextSibling);\n        this.pubsub.emit({type: 'insert', tree});\n        this.emitTree(tree.firstChild);\n    }\n}","export class PubSub<E> {\n    handlers: Set<(v: E) => any> = new Set();\n\n    subscribe(fn: (event: E) => any) {\n        this.handlers.add(fn);\n    }\n\n    unsubscribe(fn: (event: E) => any) {\n        this.handlers.delete(fn);\n    }\n\n    emit(event: E) {\n        for (const fn of this.handlers) {\n            fn(event);\n        }\n    }\n}\n","import {Model} from \"./Model\";\nimport {ModelEvent} from \"./ModelEvent\";\nimport {Tree} from \"ts-tree\";\n\nconst isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n\nexport class HTMLLiView<V> {\n    private readonly treeToHtmlEl: Map<Tree<V>, HTMLElement> = new Map();\n    private readonly htmlElToTree: Map<HTMLElement, Tree<V>> = new Map();\n    private readonly modelEventHandler: (e: ModelEvent<V>) => void;\n    private readonly mouseEventHandler: (e: MouseEvent) => void;\n    private readonly keyboardEventHandler: (e: KeyboardEvent) => void;\n    private cursorEl: HTMLElement | null = null;\n\n    constructor(private readonly model: Model<V>,\n                private readonly valueToHtmlEl: (v: V) => Node,\n                private readonly rootUlEl: Node) {\n        this.modelEventHandler = this.handleModelEvent.bind(this);\n        this.mouseEventHandler = this.handleMouseEvent.bind(this);\n        this.keyboardEventHandler = this.handleKeyboardEvent.bind(this);\n        this.model.subscribe(this.modelEventHandler);\n        document.addEventListener('mousedown', this.mouseEventHandler);\n        document.addEventListener('keydown', this.keyboardEventHandler);\n    }\n\n    unbind() {\n        this.model.unsubscribe(this.modelEventHandler);\n        this.rootUlEl.removeEventListener('mousedown', this.mouseEventHandler);\n    }\n\n    handleModelEvent(e: ModelEvent<V>) {\n        console.log(e);\n        switch (e.type) {\n            case 'insert': {\n                const newNodeEl = document.createElement('li');\n                newNodeEl.appendChild(this.valueToHtmlEl(e.tree.value));\n                newNodeEl.appendChild(document.createElement('ul'));\n                const nextSiblingEl = e.tree.nextSibling ? this.getHtmlEl(e.tree.nextSibling) : null;\n                const parentEl = e.tree.parent ? this.getHtmlEl(e.tree.parent).childNodes[1] : this.rootUlEl;\n                parentEl.insertBefore(newNodeEl, nextSiblingEl);\n                this.htmlElToTree.set(newNodeEl, e.tree);\n                this.treeToHtmlEl.set(e.tree, newNodeEl);\n                break;\n            }\n            case 'remove': {\n                const el = this.getHtmlEl(e.tree);\n                if (!el.parentElement) {\n                    throw new Error('Cannot remove root element');\n                }\n                this.htmlElToTree.delete(el);\n                this.treeToHtmlEl.delete(e.tree);\n                el.parentElement.removeChild(el);\n                break;\n            }\n            case 'add-to-selection': {\n                this.getHtmlEl(e.tree).classList.add('selected');\n                break;\n            }\n            case 'remove-from-selection': {\n                this.getHtmlEl(e.tree).classList.remove('selected');\n                break;\n            }\n            case 'move-cursor': {\n                if (this.cursorEl) {\n                    this.cursorEl.classList.remove('cursor');\n                }\n                if (e.tree) {\n                    this.cursorEl = this.getHtmlEl(e.tree);\n                    this.cursorEl.classList.add('cursor');\n                } else {\n                    this.cursorEl = null;\n                }\n            }\n        }\n    }\n\n    handleMouseEvent(e: MouseEvent) {\n        const targetEl = this.getTarget(e);\n        if (targetEl) {\n            // If ctrl+shift are pressed, then default to calling it a ctrl (MS defaults to shift, Dropbox to ctrl).\n            if (e.ctrlKey || e.metaKey) {\n                e.preventDefault();\n                this.model.selectToggle(targetEl);\n            } else if (e.shiftKey) {\n                e.preventDefault();\n                this.model.selectUntil(targetEl);\n            } else {\n                e.preventDefault();\n                this.model.selectOne(targetEl);\n            }\n        } else {\n            this.model.resetSelection();\n        }\n    }\n\n    handleKeyboardEvent(e: KeyboardEvent) {\n        if (e.ctrlKey || e.metaKey) {\n            switch (e.key) {\n                case 'a':\n                    e.preventDefault();\n                    this.model.selectAll();\n                    break;\n                case 'c':\n                    e.preventDefault();\n                    this.model.copy();\n                    break;\n                case 'v':\n                    e.preventDefault();\n                    this.model.paste();\n                    break;\n            }\n        } else {\n            console.log(e.key);\n            switch (e.key) {\n                case 'ArrowUp':\n                    e.preventDefault();\n                    this.model.selectPrev();\n                    break;\n                case 'ArrowDown':\n                    e.preventDefault();\n                    this.model.selectNext();\n                    break;\n                case 'Delete':\n                    e.preventDefault();\n                    this.model.delete();\n                    break;\n                case 'Backspace':\n                    if (isMac) {\n                        e.preventDefault();\n                        this.model.delete();\n                    }\n                    break;\n            }\n        }\n    }\n\n    getTarget(e: Event): Tree<V> | undefined {\n        if (e.target instanceof Node) {\n            for (let current: Node | null = e.target; current; current = current.parentNode) {\n                if (current instanceof HTMLElement) {\n                    const tree = this.htmlElToTree.get(current);\n                    if (tree) {\n                        return tree;\n                    }\n                }\n            }\n        }\n    }\n\n    getHtmlEl(tree: Tree<V>): HTMLElement {\n        const result = this.treeToHtmlEl.get(tree);\n        if (!result) {\n            throw new Error('No such tree');\n        }\n        return result;\n    }\n\n    getNode(el: HTMLElement): Tree<V> {\n        const result = this.htmlElToTree.get(el);\n        if (!result) {\n            throw new Error('No such tree');\n        }\n        return result;\n    }\n}","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Tree {\n    constructor(value, children = []) {\n        this.value = value;\n        this._children = children;\n        for (const child of children) {\n            child.remove();\n            child._parent = this;\n        }\n    }\n    get children() {\n        return this._children;\n    }\n    get parent() {\n        return this._parent;\n    }\n    get root() {\n        return this._parent ? this._parent.root : this;\n    }\n    get nextSibling() {\n        if (this._parent)\n            return this._parent._children[this._parent._children.indexOf(this) + 1];\n    }\n    get previousSibling() {\n        if (this._parent)\n            return this._parent._children[this._parent._children.indexOf(this) - 1];\n    }\n    get firstChild() {\n        return this._children[0];\n    }\n    get lastChild() {\n        return this._children[this._children.length - 1];\n    }\n    get previous() {\n        const previousSibling = this.previousSibling;\n        if (previousSibling)\n            return previousSibling.lastDescendant || previousSibling;\n        return this._parent;\n    }\n    get lastDescendant() {\n        const lastChild = this.lastChild;\n        if (lastChild)\n            return lastChild.lastDescendant || lastChild;\n    }\n    get next() {\n        return this.firstChild || this.nextSibling || this.parentNext;\n    }\n    get parentNext() {\n        if (this._parent)\n            return this._parent.nextSibling || this._parent.parentNext;\n    }\n    after(newTree) {\n        if (this._parent)\n            return this._parent.insertAfter(this, newTree);\n    }\n    before(newTree) {\n        if (this._parent)\n            return this._parent.insertBefore(this, newTree);\n    }\n    remove() {\n        if (this._parent)\n            return this._parent.removeChild(this);\n    }\n    appendChild(newTree) {\n        return this.insertBefore(undefined, newTree);\n    }\n    insertAfter(reference, newTree) {\n        return this.insertBefore(reference ? reference.nextSibling : this.firstChild, newTree);\n    }\n    insertBefore(reference, newTree) {\n        const index = reference ? this._children.indexOf(reference) : this._children.length;\n        if (index >= 0) {\n            newTree.remove();\n            this._children.splice(index, 0, newTree);\n            newTree._parent = this;\n            return newTree;\n        }\n    }\n    removeChild(child) {\n        const index = this._children.indexOf(child);\n        if (index >= 0) {\n            this._children.splice(index, 1);\n            child._parent = undefined;\n            return child;\n        }\n    }\n    isBefore(that) {\n        if (this === that)\n            return 0;\n        const thisAncestors = [...this.ancestors(), this];\n        const thatAncestors = [...that.ancestors(), that];\n        const minLength = Math.min(thisAncestors.length, thatAncestors.length);\n        for (let i = 0; i < minLength; ++i) {\n            const thisAncestor = thisAncestors[i];\n            const thatAncestor = thatAncestors[i];\n            if (thisAncestor !== thatAncestor) {\n                const lowestCommonAncestor = thisAncestors[i]._parent;\n                if (!lowestCommonAncestor)\n                    return 0;\n                const siblings = lowestCommonAncestor._children;\n                return siblings.indexOf(thisAncestor) < siblings.indexOf(thatAncestor) ? -1 : 1;\n            }\n        }\n        return thisAncestors.length < thatAncestors.length ? -1 : 1;\n    }\n    isChildOf(that) {\n        if (this.parent === that)\n            return true;\n        if (this.parent)\n            return this.parent.isChildOf(that);\n        return false;\n    }\n    sortChildren(fn) {\n        this._children.sort((a, b) => fn(a.value, b.value));\n    }\n    clone() {\n        return new Tree(this.value, this._children.map(_ => _.clone()));\n    }\n    *childrenAfter(reference) {\n        const length = this._children.length;\n        for (let i = this._children.indexOf(reference) + 1; i < length; ++i) {\n            yield this._children[i];\n        }\n    }\n    *childrenBefore(reference) {\n        for (let i = this._children.indexOf(reference) - 1; i >= 0; --i) {\n            yield this._children[i];\n        }\n    }\n    *previousSiblings() {\n        if (this._parent)\n            yield* this._parent.childrenBefore(this);\n    }\n    *nextSiblings() {\n        if (this._parent)\n            yield* this._parent.childrenAfter(this);\n    }\n    *descendants() {\n        for (const child of this._children) {\n            yield child;\n            yield* child.descendants();\n        }\n    }\n    *ancestors() {\n        if (this._parent) {\n            yield* this._parent.ancestors();\n            yield this._parent;\n        }\n    }\n}\nexports.Tree = Tree;\n//# sourceMappingURL=Tree.js.map"],"sourceRoot":""}